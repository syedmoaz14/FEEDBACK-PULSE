# streamlit_app.py

import streamlit as st
import pandas as pd
import plotly.express as px
import plotly.io as pio  # <-- FINAL FIX: Import for template setting
import io

# Set Plotly default template explicitly to ensure rendering
pio.templates.default = 'plotly'  # <-- FINAL FIX: Explicit template setting

# ----------------------------------------------------
# ❗ P4.1: Call st.set_page_config FIRST after imports ❗
# ----------------------------------------------------
st.set_page_config(
    page_title="FeedbackPulse AI Analyst",
    layout="wide",
    initial_sidebar_state="expanded"
)


# ----------------------------------------------------
# --- Data Loading and Caching ---
# ----------------------------------------------------

@st.cache_data
def load_analyzed_data():
    """Loads the final, LLM-analyzed data."""
    try:
        df = pd.read_csv('master_analysis_data.csv')

        # FINAL FIX: Clean up data to prevent plotting errors
        df['sentiment'] = df['sentiment'].fillna('UNKNOWN').astype(str)
        df['topic'] = df['topic'].fillna('UNKNOWN').astype(str)

        return df
    except FileNotFoundError:
        st.error("ERROR: 'master_analysis_data.csv' not found. Please run main.py first to generate the analysis.")
        return pd.DataFrame()


# Load the data
df_master = load_analyzed_data()

# ----------------------------------------------------
# --- App Header and KPIs ---
# ----------------------------------------------------

st.title("🛍️ FeedbackPulse AI: E-commerce Review Analyst")
st.caption("Structured insights and actionable items generated by the Gemini LLM.")

if df_master.empty:
    st.stop()

# Calculate KPI metrics
total_reviews = len(df_master)
processed_reviews = len(df_master[~df_master['sentiment'].isin(['UNPROCESSED', 'N/A', 'UNKNOWN'])])

st.info(f"**Total Reviews Submitted:** {total_reviews} | **Successful LLM Analysis:** {processed_reviews} reviews")
st.markdown("---")

# ----------------------------------------------------
# --- P4.3: Sidebar for Interactive Filtering ---
# ----------------------------------------------------
with st.sidebar:
    st.header("Analysis Filters")

    available_topics = df_master['topic'].dropna().unique().tolist()
    available_topics = [t for t in available_topics if t not in ['N/A', 'UNKNOWN']]

    all_topics = ['All Topics'] + sorted(available_topics)

    selected_topic = st.selectbox("Filter by Business Topic:", all_topics)

    if selected_topic != 'All Topics':
        df_filtered = df_master[df_master['topic'] == selected_topic]
    else:
        df_filtered = df_master.copy()

# ----------------------------------------------------
# --- P4.2: Implement KPI Dashboard (Charts) ---
# ----------------------------------------------------
st.subheader(f"Dashboard View ({len(df_filtered)} Reviews Displayed)")

col1, col2 = st.columns(2)

# Chart 1: Sentiment Distribution
with col1:
    st.markdown("### 📈 Sentiment Distribution")

    sentiment_counts = df_filtered['sentiment'].value_counts().reset_index()
    sentiment_counts.columns = ['Sentiment', 'Count']
    sentiment_counts['Count'] = sentiment_counts['Count'].astype(int)  # FINAL FIX: Force int type

    color_map = {'Positive': '#4CAF50', 'Negative': '#F44336', 'Neutral': '#2196F3', 'UNPROCESSED': '#9E9E9E',
                 'UNKNOWN': '#9E9E9E'}

    fig_sentiment = px.pie(
        sentiment_counts,
        values='Count',
        names='Sentiment',
        title='Overall Sentiment Breakdown',
        color='Sentiment',
        color_discrete_map=color_map,
        hole=0.3
    )
    st.plotly_chart(fig_sentiment, use_container_width=True)

# Chart 2: Top Topic Count
with col2:
    st.markdown("### 🏷️ Top Business Topics")

    topic_counts = df_filtered['topic'].value_counts().reset_index()
    topic_counts.columns = ['Topic', 'Count']

    topic_counts = topic_counts[~topic_counts['Topic'].isin(['UNKNOWN', 'N/A', 'UNPROCESSED'])]
    topic_counts['Count'] = topic_counts['Count'].astype(int)  # FINAL FIX: Force int type

    fig_topic = px.bar(
        topic_counts.head(10),
        x='Count',
        y='Topic',
        orientation='h',
        title='Volume of Feedback by Topic',
        color='Count',
        color_continuous_scale=px.colors.sequential.Teal,
    ).update_layout(yaxis={'categoryorder': 'total ascending'})

    st.plotly_chart(fig_topic, use_container_width=True)

# ----------------------------------------------------
# --- P4.4: Display Actionable Table ---
# ----------------------------------------------------

st.markdown("---")
st.markdown("### 📋 Detailed Actionable Review Insights")

st.dataframe(
    df_filtered[['topic', 'sentiment', 'action_item', 'Review Text']],
    column_config={
        "topic": "Topic",
        "sentiment": "Sentiment",
        "action_item": st.column_config.TextColumn("Action Item (LLM Suggestion)", width="medium"),
        "Review Text": st.column_config.TextColumn("Original Review Text", width="large")
    },
    hide_index=True,
    use_container_width=True
)


# ----------------------------------------------------
# --- P4.5: Add Download Button ---
# ----------------------------------------------------

@st.cache_data
def convert_df_to_csv(df):
    csv_buffer = io.StringIO()
    df.to_csv(csv_buffer, index=False)
    return csv_buffer.getvalue().encode('utf-8')


csv_data = convert_df_to_csv(df_filtered)

st.download_button(
    label="⬇️ Download Filtered Analysis Data as CSV",
    data=csv_data,
    file_name='feedback_pulse_analysis.csv',
    mime='text/csv',
    key='download-csv'
)