# streamlit_app.py

import streamlit as st
import pandas as pd
import plotly.express as px
import io

# ----------------------------------------------------
# ‚ùó P4.1: Call st.set_page_config FIRST after imports ‚ùó
# ----------------------------------------------------
st.set_page_config(
    page_title="FeedbackPulse AI Analyst",
    layout="wide",
    initial_sidebar_state="expanded"
)


# ----------------------------------------------------
# --- Data Loading and Caching ---
# ----------------------------------------------------

@st.cache_data
def load_analyzed_data():
    """Loads the final, LLM-analyzed data."""
    try:
        df = pd.read_csv('master_analysis_data.csv')
        # Ensure key columns are treated as strings
        df['sentiment'] = df['sentiment'].astype(str)
        df['topic'] = df['topic'].astype(str)
        return df
    except FileNotFoundError:
        # This error handles the case where the user hasn't run main.py yet
        st.error("ERROR: 'master_analysis_data.csv' not found. Please run main.py first to generate the analysis.")
        return pd.DataFrame()


# Load the data
df_master = load_analyzed_data()

# ----------------------------------------------------
# --- App Header and KPIs ---
# ----------------------------------------------------

st.title("üõçÔ∏è FeedbackPulse AI: E-commerce Review Analyst")
st.caption("Structured insights and actionable items generated by the Gemini LLM.")

if df_master.empty:
    st.stop()  # Stop the app if data failed to load

# Calculate KPI metrics
total_reviews = len(df_master)
# Assumes 'N/A' or 'UNPROCESSED' sentiment if LLM failed on a row
processed_reviews = len(df_master[~df_master['sentiment'].isin(['UNPROCESSED', 'N/A'])])

st.info(f"**Total Reviews Submitted:** {total_reviews} | **Successful LLM Analysis:** {processed_reviews} reviews")
st.markdown("---")

# ----------------------------------------------------
# --- P4.3: Sidebar for Interactive Filtering ---
# ----------------------------------------------------
with st.sidebar:
    st.header("Analysis Filters")

    # Get unique topics (excluding any N/A placeholders)
    available_topics = df_master['topic'].dropna().unique().tolist()
    available_topics = [t for t in available_topics if t not in ['N/A']]  # Clean list

    all_topics = ['All Topics'] + sorted(available_topics)

    selected_topic = st.selectbox("Filter by Business Topic:", all_topics)

    # Filtering logic
    if selected_topic != 'All Topics':
        df_filtered = df_master[df_master['topic'] == selected_topic]
    else:
        df_filtered = df_master.copy()

# ----------------------------------------------------
# --- P4.2: Implement KPI Dashboard (Charts) ---
# ----------------------------------------------------
st.subheader(f"Dashboard View ({len(df_filtered)} Reviews Displayed)")

col1, col2 = st.columns(2)

# Chart 1: Sentiment Distribution
with col1:
    st.markdown("### üìà Sentiment Distribution")
    sentiment_counts = df_filtered